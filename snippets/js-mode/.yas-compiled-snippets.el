;;; Compiled snippets and support files for `js-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'js-mode
                     '(("while" "\nvar i = $1.length;\n\nwhile( i -- ){\n  $0\n}" "while" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/while.yasnippet" nil nil)
                       ("wh" "while($1){\n$0\n}\n" "wh" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/wh.yasnippet" nil nil)
                       ("var" "var $1 = $0\n" "var" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/var.yasnippet" nil nil)
                       ("try" "try {\n  $1\n} catch(error) {\n  $0\n}\n" "try" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/try.yasnippet" nil nil)
                       ("throw" "throw new Error(\"$1\");\n" "throw" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/throw.yasnippet" nil nil)
                       ("this" "\\$(this)$0" "this" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/this" nil nil)
                       ("switch" "switch($1){\n$0\n};\n" "switch" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/switch.yasnippet" nil nil)
                       ("super" "$1.prototype.${2:constructor}.${3:call}($0);\n" "super" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/super.yasnippet" nil nil)
                       ("slice" "Array.prototype.slice.${1:call}($0);\n" "slice" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/slice.yasnippet" nil nil)
                       ("rt" "return$0;\n" "rt" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/rt.yasnippet" nil nil)
                       ("rr" ",$1 = require('$1')${2:;}$0" "rr" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/rr" nil nil)
                       ("rq" "$1 = require(\"${2:$1}\")${0:,}\n" "rq" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/rq.yasnippet" nil nil)
                       ("ready.1" "" "ready.1" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/ready.1" nil nil)
                       ("ready" "\\$(document).ready(function() {\n	${0:// Stuff to do as soon as the DOM is ready;}\n});\n" "ready" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/ready" nil nil)
                       ("r" "require($1)$0" "require" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/r.yasnippet" nil nil)
                       ("r" "var $1 = require('$1')${2:.};$0" "r" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/r" nil nil)
                       ("proto" "$1.prototype.$2 = $0\n" "proto" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/proto.yasnippet" nil nil)
                       ("prop" "\nvar $1 = (function(){\n\n  var value = undefined;\n\n  return function $1(newValue){\n\n    if( $1.arguments.length > 0 ){\n      value = newValue;\n    }\n\n    return value;\n  };\n\n})();\n" "prop" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/prop.yasnippet" nil nil)
                       ("plugin.2" "" "plugin.2" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/plugin.2" nil nil)
                       ("plugin.1" "" "plugin.1" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/plugin.1" nil nil)
                       ("plugin" ";(function(\\$) {\n${2:// ${3:What does the $1 plugin do?}}\n\\$.fn.${1:pluginName} = function(options) {\n  var opts = \\$.extend({}, \\$.fn.$1.defaults, options);\n\n  return this.each(function() {\n    var \\$this = \\$(this);\n\n  ${5:  ${6:// Support for the Metadata Plugin.}\n    var o = \\$.meta ? \\$.extend({\\}, opts, \\$this.data()) : opts;\n  }\n\n  });\n\n  // private function for debugging\n  function debug(\\$obj) {\n    if (window.console && window.console.log) {\n      window.console.log(\\$obj);\n    }\n  }\n};\n\n// default options\n\\$.fn.$1.defaults = {\n  ${4:defaultOne:true,\n  defaultTwo:false,\n  defaultThree:'yay!'}\n};\n\n})(jQuery);\n" "plugin" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/plugin" nil nil)
                       ("pe" "process.exit(1);$0" "JS Process Exit" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/pe.yasnippet" nil nil)
                       ("on" ".on('$1', function(${2:error}) { $3 })" "On event" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/on.yasnippet" nil nil)
                       ("method" "$1.prototype.$2 = function($3){\n${0}\n};\n" "method" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/method.yasnippet" nil nil)
                       ("log" "console.${1:log}( $0 );\n" "log" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/log.yasnippet" nil nil)
                       ("l" "console.log($0);" "l" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/l" nil nil)
                       ("jqajax" "\\$.ajax({\n  url: '${1:/path/to/file}',\n${2/(.+)/(?1:  type\\: ':)/}${2:POST}${2/(.+)/(?1:',\n:)/}${3/(.+)/(?1:  dataType\\: ':)/}${3:xml/html/script/json/jsonp}${3/(.+)/(?1:',\n:)/}${4/(.+)/(?1:  data\\: {:)/}${4:param1: 'value1'}${4/(.+)/(?1:},\n:)/}${5/(.+)/(?1:  complete\\: function\\(xhr, textStatus\\) {\n    :)/}${5://called when complete}${5/(.+)/(?1:\n  },\n:)/}${6/(.+)/(?1:  success\\: function\\(data, textStatus, xhr\\) {\n    :)/}${6://called when successful}${6/(.+)/(?1:\n  },\n:)/}${7/(.+)/(?1:  error\\: function\\(xhr, textStatus, errorThrown\\) {\n    :)/}${7://called when there is an error}\n${7/(.+)/(?1:  }\n:)/}});\n$0" "jqajax" nil
                        ("jQuery")
                        nil "/home/exu/.emacs.d/snippets/js-mode/jQuery.$.ajax" nil nil)
                       ("jre" "jQuery(document).ready(\n        function () {\n             $0         \n});" "jQuery on ready" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/jQuery on ready.yasnippet" nil nil)
                       ("invoc" "(function($1){\n$0\n})($2);\n" "invoc" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/invoc.yasnippet" nil nil)
                       ("if" "if( ${1} ){\n$0\n}\n" "if" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/if.yasnippet" nil nil)
                       ("for" "var ${1:i} = ${2:-1}, len = $3.length;\n\nfor(; ++$1 < len;){\n  $4\n}\n" "for" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/for.yasnippet" nil nil)
                       ("fn" "function$1($2){\n$0\n}\n" "fn" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/fn.yasnippet" nil nil)
                       ("f" "function$1($2){$0}" "f" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/f.yasnippet" nil nil)
                       ("exports" "module.exports = {\n$0\n};\n" "exports" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/exports.yasnippet" nil nil)
                       ("error" "if(${1:error}){\n  callback($1);\n  return;\n}\n$2\n" "error" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/error.snippet" nil nil)
                       ("com" "\n/**\n * $0\n * @param {${1:String}} $2\n * @return {${3:String}}\n */\n" "com" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/com.yasnippet" nil nil)
                       ("clone" ".clone()$0" "clone" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/clone" nil nil)
                       ("cb" "function(error, $1){\n$0\n}\n" "cb" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/cb.yasnippet" nil nil)
                       ("assert" "assert.${1:equal}($0);\n" "assert" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/assert.yasnippet" nil nil)
                       ("README.md" "# Yasnippets-jQuery #\n\n### Copyright\n\nCopyright 2009 Jose Pablo Barrantes. MIT Licence, so go for it.\n" "README.md" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/README.md" nil nil)
                       ("README" "A Collection Of Javascript Snippets For YASnippet.\n" "README" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/README" nil nil)
                       (":.9" ":file" ":.9" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.9" nil nil)
                       (":.8" ":selected" ":.8" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.8" nil nil)
                       (":.7" ":first" ":.7" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.7" nil nil)
                       (":.6" ":even" ":.6" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.6" nil nil)
                       (":.5" ":lt(${1:n})$0" ":.5" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.5" nil nil)
                       (":.4" ":disabled" ":.4" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.4" nil nil)
                       (":.31" ":visible\n" ":.31" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.31" nil nil)
                       (":.30" ":empty" ":.30" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.30" nil nil)
                       (":.3" ":radio" ":.3" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.3" nil nil)
                       (":.29" ":root" ":.29" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.29" nil nil)
                       (":.28" ":submit" ":.28" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.28" nil nil)
                       (":.27" ":contains('${1:test}')$0" ":.27" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.27" nil nil)
                       (":.26" ":not(${1:s})$0" ":.26" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.26" nil nil)
                       (":.25" ":reset" ":.25" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.25" nil nil)
                       (":.24" ":button" ":.24" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.24" nil nil)
                       (":.23" ":parent\n" ":.23" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.23" nil nil)
                       (":.22" ":hidden\n" ":.22" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.22" nil nil)
                       (":.21" ":checkbox" ":.21" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.21" nil nil)
                       (":.20" ":checked" ":.20" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.20" nil nil)
                       (":.2" ":gt(${1:n})$0" ":.2" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.2" nil nil)
                       (":.19" ":last" ":.19" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.19" nil nil)
                       (":.18" ":odd" ":.18" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.18" nil nil)
                       (":.17" ":image" ":.17" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.17" nil nil)
                       (":.16" ":last-child" ":.16" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.16" nil nil)
                       (":.15" ":nth-child(${1:n})$0" ":.15" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.15" nil nil)
                       (":.14" ":first-child" ":.14" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.14" nil nil)
                       (":.13" ":only-child" ":.13" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.13" nil nil)
                       (":.12" ":eq(${1:n})$0" ":.12" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.12" nil nil)
                       (":.11" ":text" ":.11" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.11" nil nil)
                       (":.10" ":password" ":.10" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.10" nil nil)
                       (":.1" ":enabled" ":.1" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:.1" nil nil)
                       (":" ":input" ":" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/:" nil nil)
                       ("$.unique" "\\$.unique(${1:DOMelementArray});\n$0" "$.unique" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.unique" nil nil)
                       ("$.trim" "\\$.trim(${1:'${2:string}'})$0" "$.trim" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.trim" nil nil)
                       ("$.post" "" "$.post" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.post" nil nil)
                       ("$.parseJSON" "\\$.parseJSON(${1:json});${0:}" "$.parseJSON" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.parseJSON" nil nil)
                       ("$.noop" "\\$.noop()${0:;}${1:}" "$.noop" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.noop" nil nil)
                       ("$.merge" "\\$.merge(${1:array1}, ${2:array2});\n$0" "$.merge" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.merge" nil nil)
                       ("$.map" "\\$.map(${1:array}, function(${2:item}${3:, ${4:index}}) {\n  ${5:return ${6:something};}\n});" "$.map" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.map" nil nil)
                       ("$.isPlainObject" "\\$.isPlainObject('${1:object}')$0" "$.isPlainObject" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.isPlainObject" nil nil)
                       ("$.isEmptyObject" "\\$.isEmptyObject('${1:object}')$0" "$.isEmptyObject" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.isEmptyObject" nil nil)
                       ("$.inArray" "\\$.inArray(${1:value}, ${2:array});$0" "$.inArray" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.inArray" nil nil)
                       ("$.getScript" "" "$.getScript" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.getScript" nil nil)
                       ("$.getJSON" "" "$.getJSON" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.getJSON" nil nil)
                       ("$.get" "" "$.get" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.get" nil nil)
                       ("$.extend" "\\$.extend(${1:true, }${2:target object}, ${3:object1});\n$0" "$.extend" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.extend" nil nil)
                       ("$.each" "\\$.each(${1:array/object}, function(${2:index}${3:, ${4:val}}) {\n  ${0://iterate through array or object}\n});" "$.each" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.each" nil nil)
                       ("$.browser.1" "\\$.browser.version" "$.browser.1" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.browser.1" nil nil)
                       ("$.browser" "\\$.browser${1/(.+)/(?1:.:)/}${1:webkit/opera/msie/mozilla}${1/(.+)/(?1: :)/}$0" "$.browser" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.browser" nil nil)
                       ("$.boxModel" "\\$.boxModel" "$.boxModel" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.boxModel" nil nil)
                       ("$.ajaxSetup" "\\$.ajaxSetup({\n  url: '${1:/path/to/file}',\n${2/(.+)/(?1:  type\\: ':)/}${2:POST}${2/(.+)/(?1:',\n:)/}${3/(.+)/(?1:  dataType\\: ':)/}${3:xml/html/script/json/jsonp}${3/(.+)/(?1:',\n:)/}${4/(.+)/(?1:  data\\: {:)/}${4:param1: 'value1'}${4/(.+)/(?1:},\n:)/}${5/(.+)/(?1:  complete\\: function\\(xhr, textStatus\\) {\n    :)/}${5://called when complete}${5/(.+)/(?1:\n  },\n:)/}${6/(.+)/(?1:  success\\: function\\(data, textStatus, xhr\\) {\n    :)/}${6://called when successful}${6/(.+)/(?1:\n  },\n:)/}${7/(.+)/(?1:  error\\: function\\(xhr, textStatus, errorThrown\\) {\n    :)/}${7://called when there is an error}\n${7/(.+)/(?1:  }\n:)/}});\n$0" "$.ajaxSetup" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$.ajaxSetup" nil nil)
                       ("$" "\\$(${1/(.+)/(?1:':)/}${1:string/element/array/function/jQuery object/string, context}${1/(.+)/(?1:':)/})$0" "$" nil nil nil "/home/exu/.emacs.d/snippets/js-mode/$" nil nil)))


;;; Do not edit! File generated at Thu Sep 22 07:19:53 2016
